"""
Django settings for pages project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

import dj_database_url
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# add STATIC_URL setting
STATIC_URL = '/static/'
# add STATIC_ROOT Setting (required in Heroku)
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_ROOT = BASE_DIR / 'staticfiles'
# add additional static file setting
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]


ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'hooshousing-5d3cd692215a.herokuapp.com']


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("DJANGO_SECRET_KEY", default=None)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # <- 필수

    # allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # Google login

    'mysite.apps.MySiteConfig',
    'user_service.apps.UserServiceConfig',  # user_service app
    'listing_service.apps.ListingServiceConfig',
    'leasing_service.apps.LeasingServiceConfig',  # listing_service app
    'review_service.apps.ReviewServiceConfig',
    'notification_service.apps.NotificationServiceConfig',

    'storages'  # Amazon S3
]

AUTH_USER_MODEL = "user_service.CustomUser"

# Configure allauth to use CustomUser
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"
# ACCOUNT_AUTHENTICATION_METHOD = "username"  # Restrict authentication to username only
ACCOUNT_LOGIN_METHODS = {'username'}
ACCOUNT_EMAIL_REQUIRED = True  # Disable email requirement
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_UNIQUE_EMAIL = False 

# Set CustomSignupForm as the registration form
ACCOUNT_FORMS = {"signup": "user_service.forms.CustomSignupForm",
                 'login': 'user_service.forms.CustomLoginForm',
                 }

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # basic Django auth backend
    'allauth.account.auth_backends.AuthenticationBackend',  # allauth backend
]

SITE_ID = 5 # Django auth site id

# Google Credentials
GOOGLE_CLIENT_ID = config("GOOGLE_CLIENT_ID")
GOOGLE_SECRET_KEY = config("GOOGLE_SECRET_KEY")

# Walk Score API
WALKSCORE_API_KEY = config('WALKSCORE_API_KEY')

# Remove Middle Page for Google Login
SOCIALACCOUNT_LOGIN_ON_GET = True

# Google credential data from .evn file
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {"access_type": "online"},
        "APP": {
            "client_id": GOOGLE_CLIENT_ID,
            "secret": GOOGLE_SECRET_KEY,
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}

# AWS Credentials
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID", default=None)
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", default=None)
AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME", default="us-east-1")
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME", default=None)

# S3 Domain
AWS_S3_CUSTOM_DOMAIN = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
MEDIA_URL = f"{AWS_S3_CUSTOM_DOMAIN}/"

# STATIC 파일을 S3로 저장하려면 추가
# STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

CSRF_TRUSTED_ORIGINS = [
    "https://hooshousing-5d3cd692215a.herokuapp.com",
]

# redirect url after login/logout
LOGIN_URL = '/'  # login page
LOGIN_REDIRECT_URL = '/listings/'  # after login
ACCOUNT_LOGOUT_REDIRECT_URL = '/accounts/login'
ACCOUNT_LOGOUT_ON_GET = True  # enables logout with get method

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'allauth.account.middleware.AccountMiddleware',    
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "mysite", "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
# DATABASE_URL = config('DATABASE_URL', default=None)

# Check if DATABASE_URL environment variable exists
DATABASE_URL = config('DATABASE_URL', default=None)

if DATABASE_URL:
    print("Using DATABASE_URL from .env or environment")
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    print("Using SQLite for local development")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
